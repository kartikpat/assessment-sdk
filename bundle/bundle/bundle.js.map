{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["var assessmentSdk = (function () {\n    'use strict';\n\n    function transformClass(classNameArr) {\n        var classNameStr = '';\n        var transformedArr = [];\n        classNameArr.forEach(function (className) {\n            className = pluginName + className;\n            transformedArr.push(className);\n        });\n        classNameStr = transformedArr.join(\" \");\n        return classNameStr;\n    }\n\n    function transformId(id) {\n        return pluginName + id;\n    }\n\n    function createElement(elem, classNameArr, id) {\n        var domElem = $(\"<\" + elem + \"></\" + elem + \">\");\n        if (classNameArr && classNameArr.length) {\n            domElem.addClass(transformClass(classNameArr));\n        }\n        if (id) {\n            domElem.attr(\"id\", transformId(id));\n        }\n        return domElem;\n    }\n\n    function createCheckbox(id, name, value, dataLabel, text) {\n        var checkboxWrapper = createElement(\"div\", [\"checkbox-wrapper\"]);\n\n        var input = createElement(\"input\", [\"checkbox-input\"]).attr({ \"id\": id, \"type\": \"checkbox\", \"name\": name, \"value\": value, \"data-label\": dataLabel });\n        var label = createElement(\"label\", [\"checkbox-label\"]).attr({ \"for\": id }).text(text);\n\n        checkboxWrapper.html(input[0].outerHTML + label[0].outerHTML);\n        return checkboxWrapper[0].outerHTML;\n    }\n\n    function createSelectDropdown(options, id) {\n        var select = createElement(\"select\", [\"select-dropdown\"]);\n        var optionRowStr = '';\n        options.forEach(function (anOption) {\n            var optionRow = createElement(\"option\", [\"option-row\"], id).attr({ \"value\": anOption[\"value\"] }).text(anOption[\"text\"]);\n            optionRowStr += optionRow[0].outerHTML;\n        });\n        select.html(optionRowStr);\n        return select[0].outerHTML;\n    }\n\n    function toggleSlideOptions(elem) {\n        elem.on('click', '.' + transformClass([\"slide-toggle-button\"]), function (event) {\n            event.stopPropagation();\n            $(this).next().slideToggle();\n        });\n    }\n\n    function closeContainer() {\n        $(\".\" + transformClass([\"container\"])).addClass(\"hidden\");\n    }\n\n    function createTextarea(n) {\n        if (!n) return;\n\n        var i;\n        var textareaStr = '';\n        for (i = 0; i < n; i++) {\n            var textarea = createElement(\"textarea\", [\"textarea\", \"small\", \"optionsTextarea\"]).attr({\n                \"placeholder\": \"Option \" + (i + 1) + \"\"\n            });        textareaStr += textarea[0].outerHTML;\n        }\n        return textareaStr;\n    }\n\n    var settings = {};\n\n    function initialize(options) {\n\n        settings.totalQuestAddedCount = 0;\n        settings.options = options;\n\n        var wrapper = createElement(\"div\", [\"wrapper\"]);\n        wrapper.html(createWrapperContent());\n\n        $(\"#\" + settings.options.wrapperName).html(wrapper[0].outerHTML);\n\n        settings.addQuestContainer = $(\"#\" + transformId(\"addQuestContainer\"));\n        settings.usePrevQuestContainer = $(\"#\" + transformId(\"usePrevQuestContainer\"));\n        settings.usePrevButton = $(\"#\" + transformId(\"usePrevButton\"));\n        settings.addQuestButton = $(\"#\" + transformId(\"addQuestButton\"));\n        settings.addQuestButtonModal = $(\"#\" + transformId(\"addQuestButtonModal\"));\n        settings.questionTextarea = $(\"#\" + transformId(\"questionTextarea\"));\n        settings.questionType = $(\"#\" + transformId(\"questionType\"));\n        settings.usePrevButtonModal = $(\"#\" + transformId(\"usePrevButtonModal\"));\n\n        settings.optionsTextarea = $(\".\" + transformClass([\"optionsTextarea\"]));\n        settings.totalQuestAdded = $(\".\" + transformClass([\"totalQuestAdded\"]));\n\n        settings.addQuesButton.click(function (e) {\n            e.stopPropagation();\n            settings.addQuestContainer.removeClass(\"hidden\");\n        });\n\n        $(\"body\").click(function () {\n            closeContainer();\n        });\n\n        $(\".\" + transformClass([\"container\"])).click(function (event) {\n            event.stopPropagation();\n        });\n\n        $(\".\" + transformClass([\"cancel-button\"])).click(function (event) {\n            event.stopPropagation();\n            closeContainer();\n        });\n\n        onClickPrevQuestCheckboxModal();\n\n        toggleSlideOptions(settings.usePrevQuestContainer);\n\n        onClickUsePrevButton();\n    }\n\n    function onClickUsePrevButton() {\n        settings.usePrevButton.click(function (e) {\n            e.stopPropagation();\n            settings.usePrevQuestContainer.removeClass(\"hidden\");\n        });\n    }\n\n    function onClickSaveQuestion(fn) {\n        settings.addQuestButtonModal.click(function (e) {\n            e.stopPropagation();\n            var data = {};\n            data[\"question\"] = settings.questionTextarea.val();\n            data[\"type\"] = settings.questionType.val();\n            var ansOptions = [];\n            $.each(settings.optionsTextarea, function (index, anOption) {\n                ansOptions.push($(anOption).val());\n            });\n            data[\"ansOptions\"] = ansOptions;\n            data[\"author\"] = settings.options.author;\n\n            fn(data);\n        });\n    }\n\n    function onClickUsePrevButtonModal(fn) {\n        settings.usePrevButtonModal.click(function (event) {\n            event.stopPropagation();\n            fn();\n        });\n    }\n\n    function createWrapperContent() {\n        var mainContainer = createElement(\"div\", [\"main-container\"]);\n        mainContainer.html(createMainContainer());\n\n        return mainContainer[0].outerHTML;\n    }\n\n    function createMainContainer() {\n        var heading = createElement(\"div\", [\"heading\"]).text(settings.options[\"title\"]);\n        var subHeading = createElement(\"div\", [\"sub-heading\"]).text(settings.options[\"subTitle\"]);\n\n        // var addedQuestContainer = createElement(\"div\", [\"added-quest-container\"], \"addedQuestContainer\")\n        // addedQuestContainer.html(createAddedQuestContainer())\n\n        var actionButtonsCont = createElement(\"div\", [\"action-button-container\"]);\n        var text = createElement(\"span\", [\"or-text\"]).text(\"or\");\n        var usePrevButton = createElement(\"button\", [\"button\"], \"usePrevButton\").text(settings.options[\"usePrevButtonText\"]).addClass(\"hidden\");\n        var addQuesButton = createElement(\"button\", [\"button\"], \"addQuesButton\").text(settings.options[\"addQuesButtonText\"]);\n\n        var addQuestContainer = createElement(\"div\", [\"container\", \"addQuestContainer\"], \"addQuestContainer\").addClass(\"hidden\");\n        addQuestContainer.html(createAddQuestContainer());\n\n        var usePrevQuestContainer = createElement(\"div\", [\"container\", \"usePrevQuestContainer\"], \"usePrevQuestContainer\").addClass(\"hidden\");\n        usePrevQuestContainer.html(createUsePrevQuestContainer());\n\n        actionButtonsCont.html(addQuesButton[0].outerHTML + text[0].outerHTML + usePrevButton[0].outerHTML + addQuestContainer[0].outerHTML + usePrevQuestContainer[0].outerHTML);\n\n        return heading[0].outerHTML + subHeading[0].outerHTML + actionButtonsCont[0].outerHTML;\n    }\n\n    function createAddQuestContainer() {\n        var sectionHeader = createElement(\"div\", [\"section-header\"]);\n        var selectDropdown = createSelectDropdown(questionTypeOptions, \"questionType\");\n        var checkbox = createCheckbox(\"addQuestionHeader-isQuestMandatory\", null, null, null, \"Mandatory\");\n        sectionHeader.html(selectDropdown + checkbox);\n        var sectionContent = createElement(\"div\", [\"section-content\"]);\n        sectionContent.html(createAddQuestSectionContent(\"multi\"));\n        return sectionHeader[0].outerHTML + sectionContent[0].outerHTML;\n    }\n\n    function createUsePrevQuestContainer() {\n        var sectionHeading = createElement(\"div\", [\"section-heading\"]).text(settings.options[\"prevQuestContainerHeading\"]);\n        var sectionContent = createElement(\"div\", [\"section-content\"]);\n        var sectionFooter = createElement(\"div\", [\"section-footer\"]);\n        var addButton = createElement(\"button\", [\"button\"], \"usePrevButtonModal\").text(\"Add selected questions\");\n        var cancelButton = createElement(\"button\", [\"button\", \"cancel-button\"]).text(\"Cancel\");\n        var totalQuestionsAdded = createElement(\"div\", [\"quest-added-text\", \"totalQuestAdded\"]).text(\"Questions added: 0/10\");\n        sectionFooter.html(addButton[0].outerHTML + cancelButton[0].outerHTML + totalQuestionsAdded[0].outerHTML);\n\n        return sectionHeading[0].outerHTML + sectionContent[0].outerHTML + sectionFooter[0].outerHTML;\n    }\n\n    function createAddQuestSectionContent(questionType) {\n        var questionText = createElement(\"div\", [\"text\"]).text(\"Question Text\");\n        var questionTextarea = createElement(\"textarea\", [\"textarea\"], \"questionTextarea\").attr({ \"placeholder\": \"What would you like to ask?\" });\n\n        var addQuestButton = createElement(\"button\", [\"button\"], \"addQuestButtonModal\").text(\"Save\");\n        var cancelButton = createElement(\"button\", [\"button\", \"borderLess-button\", \"cancel-button\"]).text(\"Cancel\");\n\n        if ([\"multi\", \"single\"].indexOf(questionType) != -1) {\n            var optionsWrapper = createElement(\"div\", [\"options-wrapper\"]);\n            var optionTextArea = createTextarea(2);\n            var addOptionButton = createElement(\"button\", [\"button\", \"borderLess-button\", \"add-option\"]).text(\"Add\");\n            optionsWrapper.html(optionTextArea + addOptionButton[0].outerHTML);\n            return questionText[0].outerHTML + questionTextarea[0].outerHTML + optionsWrapper[0].outerHTML + addQuestButton[0].outerHTML + cancelButton[0].outerHTML;\n        }\n        return questionText[0].outerHTML + questionTextarea[0].outerHTML + addQuestButton[0].outerHTML + cancelButton[0].outerHTML;\n    }\n\n    function onClickPrevQuestCheckboxModal() {\n        settings.usePrevQuestContainer.on('click', '.' + transformClass([\"checkbox-input\"]), function (event) {\n            event.stopPropagation();\n            if ($(this).is(\":checked\")) {\n                settings.totalQuestAddedCount += 1;\n                updateTotalQuestionsAddedText();\n                if (settings.totalQuestAddedCount == 10) {\n                    settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"])).attr(\"disabled\", true);\n                    settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"]) + ':checked').attr(\"disabled\", false);\n                }\n                // var el = settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"]) + ':checked')\n                // console.log(el)\n            } else {\n                settings.totalQuestAddedCount -= 1;\n                updateTotalQuestionsAddedText();\n                settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"])).attr(\"disabled\", false);\n            }\n        });\n        settings.usePrevQuestContainer.on('click', '.' + transformClass([\"checkbox-label\"]), function (event) {\n            event.stopPropagation();\n        });\n    }\n\n    function updateTotalQuestionsAddedText() {\n        settings.totalQuestAdded.text(\"Questions added: \" + settings.totalQuestAddedCount + \"/10\");\n    }\n\n    function associateQuestionWithQuestionaire(questionaireId, sectionId, data, extraParameters) {\n    \treturn postRequest(sdkbaseUrl + \"/v1/questionaire/\" + questionaireId + \"/section/\" + sectionId + \"/question\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\t// res.extraParameters = {}\n    \t\t\t// res.extraParameters[\"questionaireId\"] = extraParameters.questionaireId\n    \t\t\treturn pubsub.publish(\"associatedQuestionWithQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToAssociateQuestionWithQuestionaire\", res);\n    \t});\n    }\n\n    function createQuestion(data, extraParameters) {\n    \treturn postRequest(sdkbaseUrl + \"/v1/question\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\tres.extraParameters = {};\n    \t\t\tres.extraParameters[\"questionaireId\"] = extraParameters.questionaireId;\n    \t\t\tres.extraParameters[\"questionData\"] = extraParameters.questionData;\n    \t\t\treturn pubsub.publish(\"createdQuestion\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToCreateQuestion\", res);\n    \t});\n    }\n\n    function fetchQuestions(parameters) {\n    \treturn getRequest(sdkbaseUrl + \"/v1/question\", parameters, function (res) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\treturn pubsub.publish(\"fetchedQuestions\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToFetchQuestions\", res);\n    \t});\n    }\n\n    function createQuestionaire(data, extraParameters) {\n    \treturn postRequest(sdkbaseUrl + \"/v1/questionaire\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\tres.extraParameters = {};\n    \t\t\tres.extraParameters[\"questionData\"] = extraParameters.questionData;\n    \t\t\treturn pubsub.publish(\"createdQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToCreateQuestionaire\", res);\n    \t});\n    }\n\n    function fetchQuestionaire(parameters) {\n    \treturn getRequest(sdkbaseUrl + \"/v1/questionaire\", parameters, function (res) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\treturn pubsub.publish(\"fetchedQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToFetchQuestionaire\", res);\n    \t});\n    }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Assessment = function Assessment(options) {\n        _classCallCheck(this, Assessment);\n\n        this.title = options.title || 'Screening Questions';\n        this.subTitle = options.subTitle || 'You can ask some questions before the candidates apply to your job!';\n        this.author = options.author || Error('I was created using a function call!');\n        this.association = options.association || Error('I was created using a function call!');\n\n        return;\n\n        var questionaireParameters = {\n            \"association\": options.association,\n            \"invocation\": questionaireInvocation[\"screening\"]\n        };\n\n        var questionsParameters = {\n            \"author\": options.author\n        };\n\n        $.when(fetchQuestionaire(questionaireParameters), fetchQuestions(questionsParameters)).then(function (a, b) {\n            if (a[0] && b[0] && a[0][\"status\"] == \"success\" && b[0][\"status\"] == \"success\") {\n\n                var questionaireRows = a[0]['data'];\n                var questionRows = b[0]['data'];\n\n                var data = {\n                    \"questionaire\": questionaireRows,\n                    \"questions\": questionRows\n                };\n\n                return pubsub.publish(\"fetchedQuestionaireDetails\", data);\n            }\n        }, function (res, status, error) {\n            return pubsub.publish(\"failedToFetchQuestionaireDetails\", res);\n        });\n\n        function onSuccessfullCreateQuestionaire(topic, res) {\n            var extraParameters = {};\n            extraParameters.questionaireId = res.data;\n            extraParameters.questionData = res.extraParameters.questionData;\n            createQuestion(res.extraParameters.questionData, extraParameters);\n        }\n\n        function onFailCreateQuestionaire(topic, data) {}\n\n        var createdQuestionaireSuccessSubscription = pubsub.subscribe(\"createdQuestionaire\", onSuccessfullCreateQuestionaire);\n        var createdQuestionaireFailSubscription = pubsub.subscribe(\"failedToCreateQuestionaire\", onFailCreateQuestionaire);\n\n        function onSuccessfullCreateQuestion(topic, res) {\n            questions[res.data] = res.extraParameters.questionData;\n            var data = {};\n            data[\"questions\"] = Object.keys(questions);\n            associateQuestionWithQuestionaire(res.extraParameters.questionaireId, 0, data, {});\n        }\n\n        function onFailCreateQuestion(topic, data) {}\n\n        var createdQuestionSuccessSubscription = pubsub.subscribe(\"createdQuestion\", onSuccessfullCreateQuestion);\n        var createdQuestionFailSubscription = pubsub.subscribe(\"failedToCreateQuestion\", onFailCreateQuestion);\n\n        function onSuccessfullAssociateQuestionWithQuestionaire(topic, res) {\n            alert(res.message);\n            // questionIds.push(res.data);\n            // associateQuestionWithQuestionaire(questionIds)\n        }\n\n        function onFailAssociateQuestionWithQuestionaire(topic, data) {}\n\n        var associatedQuestionWithQuestionaireSuccessSubscription = pubsub.subscribe(\"associatedQuestionWithQuestionaire\", onSuccessfullAssociateQuestionWithQuestionaire);\n        var associatedQuestionWithQuestionaireFailSubscription = pubsub.subscribe(\"failedToAssociateQuestionWithQuestionaire\", onFailAssociateQuestionWithQuestionaire);\n\n        function onSuccessfullFetchedQuestionaireDetails(topic, res) {\n            var data = res.data;\n            console.log(this.options);\n            return;\n            options.responseData = data;\n\n            initialize(options);\n\n            onClickUsePrevButtonModal(function () {\n                console.log(\"hi\");\n            });\n\n            onClickSaveQuestion(function (questionData) {\n                var questionaireData = {\n                    \"author\": options.author,\n                    \"tags\": options.tags,\n                    \"authorType\": options.authorType,\n                    \"invocation\": questionaireInvocation[\"screening\"],\n                    \"association\": options.association,\n                    \"sections\": [{\n                        \"type\": \"static\",\n                        \"questions\": []\n                    }]\n                };\n                var extraParameters = {};\n                extraParameters.questionData = questionData;\n                createQuestionaire(questionaireData, extraParameters);\n            });\n        }\n\n        function onFailFetchedQuestionaireDetails(topic, data) {}\n\n        var fetchedQuestionaireDetailsSuccessSubscription = pubsub.subscribe(\"fetchedQuestionaireDetails\", onSuccessfullFetchedQuestionaireDetails);\n        var fetchedQuestionaireDetailsFailSubscription = pubsub.subscribe(\"failedToFetchQuestionaireDetails\", onFailFetchedQuestionaireDetails);\n    };\n\n    return Assessment;\n\n}());\n"],"file":"../bundle.js"}