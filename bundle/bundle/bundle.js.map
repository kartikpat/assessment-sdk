{"version":3,"names":[],"mappings":"","sources":["bundle.js"],"sourcesContent":["var assessmentSdk = (function () {\n    'use strict';\n\n    var pluginName = \"my-plugin-\";\n    var settings = {};\n    var questionTypeOptions = [{\n        \"value\": 1,\n        \"text\": \"Multi choice\",\n        \"data-label\": \"multi\"\n    }, {\n        \"value\": 2,\n        \"text\": \"Single choice\",\n        \"data-label\": \"single\"\n    }, {\n        \"value\": 3,\n        \"text\": \"Yes/No Question\"\n    }, {\n        \"value\": 4,\n        \"text\": \"Short Answer\"\n    }, {\n        \"value\": 5,\n        \"text\": \"Long Answer\"\n    }];\n\n    var questionaireInvocation = {\n        \"screening\": 1\n    };\n\n    function extendDefaults(source, properties) {\n        var property;\n        for (property in properties) {\n            if (properties.hasOwnProperty(property)) {\n                source[property] = properties[property];\n            }\n        }\n        return source;\n    }\n\n    function transformClass(classNameArr) {\n        var classNameStr = '';\n        var transformedArr = [];\n        classNameArr.forEach(function (className) {\n            className = pluginName + className;\n            transformedArr.push(className);\n        });\n        classNameStr = transformedArr.join(\" \");\n        return classNameStr;\n    }\n\n    function transformId(id) {\n        return pluginName + id;\n    }\n\n    function createElement(elem, classNameArr, id) {\n        var domElem = $(\"<\" + elem + \"></\" + elem + \">\");\n        if (classNameArr && classNameArr.length) {\n            domElem.addClass(transformClass(classNameArr));\n        }\n        if (id) {\n            domElem.attr(\"id\", transformId(id));\n        }\n        return domElem;\n    }\n\n    function createCheckbox(id, name, value, dataLabel, text) {\n        var checkboxWrapper = createElement(\"div\", [\"checkbox-wrapper\"]);\n\n        var input = createElement(\"input\", [\"checkbox-input\"]).attr({ \"id\": id, \"type\": \"checkbox\", \"name\": name, \"value\": value, \"data-label\": dataLabel });\n        var label = createElement(\"label\", [\"checkbox-label\"]).attr({ \"for\": id }).text(text);\n\n        checkboxWrapper.html(input[0].outerHTML + label[0].outerHTML);\n        return checkboxWrapper[0].outerHTML;\n    }\n\n    function createSlideDropDown(options) {\n        var slideWrapper = createElement(\"div\", [\"slide-wrapper\"]);\n        var toggleButton = createElement(\"div\", [\"slide-toggle-button\"]).text(\"view options\");\n        var optionsWrapper = createElement(\"div\", [\"options-wrapper\"]);\n        var optionRowStr = '';\n\n        options.forEach(function (anOption) {\n            var optionRow = createElement(\"div\", [\"option-row\"]).text(anOption);\n            optionRowStr += optionRow[0].outerHTML;\n        });\n        optionsWrapper.html(optionRowStr);\n        slideWrapper.html(toggleButton[0].outerHTML + optionsWrapper[0].outerHTML);\n        return slideWrapper[0].outerHTML;\n    }\n\n    function createSelectDropdown(options, id) {\n        var select = createElement(\"select\", [\"select-dropdown\"], id);\n        var optionRowStr = '';\n        options.forEach(function (anOption) {\n            var optionRow = createElement(\"option\", [\"option-row\"]).attr({\n                \"value\": anOption[\"value\"],\n                \"data-label\": anOption[\"data-label\"]\n            }).text(anOption[\"text\"]);\n            optionRowStr += optionRow[0].outerHTML;\n        });\n        select.html(optionRowStr);\n        return select[0].outerHTML;\n    }\n\n    function toggleSlideOptions(elem) {\n        elem.on('click', '.' + transformClass([\"slide-toggle-button\"]), function (event) {\n            event.stopPropagation();\n            $(this).next().slideToggle();\n        });\n    }\n\n    function closeContainer() {\n        $(\".\" + transformClass([\"container\"])).addClass(\"hidden\");\n    }\n\n    function createTextarea(n, offset) {\n        if (!n) return;\n\n        var j = offset || 0;\n        var i;\n        var textareaStr = '';\n        for (i = 0; i < n; i++) {\n            var optionsTextareaWrapper = createElement(\"div\", [\"options-textarea-wrapper\"]);\n            var textarea = createElement(\"textarea\", [\"textarea\", \"small\", \"optionsTextarea\"]).attr({\n                \"placeholder\": \"Option \" + (j + 1)\n            });\n            j++;\n            var cancelButton = createElement(\"span\", [\"cross-button\", \"deleteOptionButton\"]).addClass(\"hidden\");\n            optionsTextareaWrapper.html(textarea[0].outerHTML + cancelButton[0].outerHTML);\n\n            textareaStr += optionsTextareaWrapper[0].outerHTML;\n        }\n        return textareaStr;\n    }\n\n    function initialize(data) {\n        settings.totalQuestAddedCount = data.questionaire[0][\"sections\"][0][\"questions\"].length;\n        settings.options = data.options;\n        settings.prevQuestions = data.prevQuestions;\n\n        var wrapper = createElement(\"div\", [\"wrapper\"]);\n        wrapper.html(createWrapperContent());\n\n        $(\"#container\").html(wrapper[0].outerHTML);\n\n        settings.addQuestContainer = $(\"#\" + transformId(\"addQuestContainer\"));\n        settings.usePrevQuestContainer = $(\"#\" + transformId(\"usePrevQuestContainer\"));\n        settings.usePrevButton = $(\"#\" + transformId(\"usePrevButton\"));\n        settings.addQuestButton = $(\"#\" + transformId(\"addQuestButton\"));\n        settings.addQuestButtonModal = $(\"#\" + transformId(\"addQuestButtonModal\"));\n        settings.questionTextarea = $(\"#\" + transformId(\"questionTextarea\"));\n        settings.questionType = $(\"#\" + transformId(\"questionType\"));\n        settings.usePrevButtonModal = $(\"#\" + transformId(\"usePrevButtonModal\"));\n        settings.questMandatory = $(\"#\" + transformId(\"addQuestionHeader-isQuestMandatory\"));\n        settings.addQuestOptionButton = $(\"#\" + transformId(\"addQuestOptionButton\"));\n\n        settings.optionsTextarea = $(\".\" + transformClass([\"optionsTextarea\"]));\n        settings.totalQuestAdded = $(\".\" + transformClass([\"totalQuestAdded\"]));\n\n        updateTotalQuestionsAddedText();\n\n        settings.addQuestButton.click(function (e) {\n            e.stopPropagation();\n            settings.addQuestContainer.removeClass(\"hidden\");\n        });\n\n        $(\"body\").click(function () {\n            closeContainer();\n        });\n\n        $(\".\" + transformClass([\"container\"])).click(function (event) {\n            event.stopPropagation();\n        });\n\n        $(\".\" + transformClass([\"cancel-container-button\"])).click(function (event) {\n            event.stopPropagation();\n            closeContainer();\n        });\n\n        onClickPrevQuestCheckboxModal();\n\n        toggleSlideOptions(settings.usePrevQuestContainer);\n\n        onClickUsePrevButton();\n\n        onClickAddQuestOption();\n\n        onChangeQuestType();\n\n        onClickDeleteQuestOption();\n    }\n\n    function onClickDeleteQuestOption() {\n        settings.addQuestContainer.on('click', \".\" + transformClass([\"deleteOptionButton\"]), function (e) {\n            $(this).parent().remove();\n            var optionsLength = settings.addQuestContainer.find(\".my-plugin-optionsTextarea\").length;\n            if (optionsLength <= 2) {\n                settings.addQuestContainer.find('.' + transformClass([\"deleteOptionButton\"])).addClass(\"hidden\");\n            }\n        });\n    }\n\n    function onChangeQuestType() {\n        settings.questionType.change(function (e) {\n            var type = $(this).find('option:selected').attr(\"data-label\");\n            settings.addQuestContainer.find(\".\" + transformClass([\"section-content\"])).html(createAddQuestSectionContent(type));\n        });\n    }\n\n    function onClickAddQuestOption() {\n        settings.addQuestOptionButton.click(function (e) {\n            e.stopPropagation();\n            var optionsLength = settings.addQuestContainer.find(\".my-plugin-optionsTextarea\").length;\n            settings.addQuestContainer.find(\".\" + transformClass([\"options-wrapper\"])).append(createTextarea(1, optionsLength));\n            if (optionsLength >= 2) {\n                settings.addQuestContainer.find('.' + transformClass([\"deleteOptionButton\"])).removeClass(\"hidden\");\n            }\n        });\n    }\n\n    function onClickUsePrevButton() {\n        settings.usePrevButton.click(function (e) {\n            e.stopPropagation();\n            settings.usePrevQuestContainer.removeClass(\"hidden\");\n        });\n    }\n\n    function onClickAddQuestion(fn) {\n        settings.addQuestButtonModal.click(function (e) {\n            e.stopPropagation();\n            var data = {};\n            data[\"question\"] = settings.questionTextarea.val();\n            data[\"type\"] = settings.questionType.val();\n            var ansOptions = [];\n            $.each(settings.optionsTextarea, function (index, anOption) {\n                ansOptions.push($(anOption).val());\n            });\n            data[\"answerOptions\"] = ansOptions;\n            data[\"author\"] = settings.options.author;\n            data[\"mandatory\"] = settings.questMandatory.is(\":checked\");\n\n            fn(data);\n        });\n    }\n\n    function onClickUsePrevButtonModal(fn) {\n        settings.usePrevButtonModal.click(function (event) {\n            event.stopPropagation();\n            fn();\n        });\n    }\n\n    function createWrapperContent() {\n\n        var mainContainer = createElement(\"div\", [\"main-container\"]);\n        mainContainer.html(createMainContainer());\n\n        return mainContainer[0].outerHTML;\n    }\n\n    function createMainContainer() {\n\n        var heading = createElement(\"div\", [\"heading\"]).text(settings.options[\"title\"]);\n        var subHeading = createElement(\"div\", [\"sub-heading\"]).text(settings.options[\"subTitle\"]);\n\n        // var addedQuestContainer = createElement(\"div\", [\"added-quest-container\"], \"addedQuestContainer\")\n        // addedQuestContainer.html(createAddedQuestContainer())\n\n        var actionButtonsCont = createElement(\"div\", [\"action-button-container\"]);\n        var addQuestButton = createElement(\"button\", [\"button\"], \"addQuestButton\").text(\"Add Question\");\n\n        var addQuestContainer = createElement(\"div\", [\"container\", \"addQuestContainer\"], \"addQuestContainer\").addClass(\"hidden\");\n        addQuestContainer.html(createAddQuestContainer());\n\n        var actionButtonsContStr = addQuestButton[0].outerHTML + addQuestContainer[0].outerHTML;\n\n        if (settings.prevQuestions.length) {\n\n            var text = createElement(\"span\", [\"or-text\"]).text(\"or\");\n            var usePrevButton = createElement(\"button\", [\"button\"], \"usePrevButton\").text(\"Use previously used questions\");\n            var usePrevQuestContainer = createElement(\"div\", [\"container\", \"usePrevQuestContainer\"], \"usePrevQuestContainer\").addClass(\"hidden\");\n            usePrevQuestContainer.html(createUsePrevQuestContainer(settings.prevQuestions));\n\n            actionButtonsContStr = addQuestButton[0].outerHTML + text[0].outerHTML + usePrevButton[0].outerHTML + addQuestContainer[0].outerHTML + usePrevQuestContainer[0].outerHTML;\n        }\n\n        actionButtonsCont.html(actionButtonsContStr);\n\n        return heading[0].outerHTML + subHeading[0].outerHTML + actionButtonsCont[0].outerHTML;\n    }\n\n    // function createAddedQuestContainer() {\n    //     var heading = createElement(\"div\", [\"heading\"]);\n    //     var questionsContent = createElement(\"div\", [\"content\"]);\n    //     questionsContent.html(createQuestionsContent())\n    //     var selectDropdown = createSelectDropdown(questionTypeOptions, \"questionType\");\n    //     var checkbox = createCheckbox(transformId(\"addQuestionHeader-isQuestMandatory\"), null, null, null, \"Mandatory\");\n    //     sectionHeader.html(selectDropdown + checkbox);\n    //     var sectionContent = createElement(\"div\", [\"section-content\"]);\n    //     sectionContent.html(createAddQuestSectionContent(1))\n    //     return sectionHeader[0].outerHTML + sectionContent[0].outerHTML\n    // }\n\n    // function createQuestionsContent() {}\n\n    function createAddQuestContainer() {\n        var sectionHeader = createElement(\"div\", [\"section-header\"]);\n        var selectDropdown = createSelectDropdown(questionTypeOptions, \"questionType\");\n        var checkbox = createCheckbox(transformId(\"addQuestionHeader-isQuestMandatory\"), null, null, null, \"Mandatory\");\n        sectionHeader.html(selectDropdown + checkbox);\n        var sectionContent = createElement(\"div\", [\"section-content\"]);\n        sectionContent.html(createAddQuestSectionContent(\"multi\"));\n\n        var sectionFooter = createElement(\"div\", [\"section-footer\"]);\n        var addButton = createElement(\"button\", [\"button\"], \"addQuestButtonModal\").text(\"Add\");\n        var cancelButton = createElement(\"button\", [\"button\", \"borderLess-button\", \"cancel-container-button\"]).text(\"Cancel\");\n        sectionFooter.html(addButton[0].outerHTML + cancelButton[0].outerHTML);\n\n        return sectionHeader[0].outerHTML + sectionContent[0].outerHTML + sectionFooter[0].outerHTML;\n    }\n\n    function createUsePrevQuestContainer(data) {\n        var sectionHeading = createElement(\"div\", [\"section-heading\"]).text(\"Use previously added question\");\n        var sectionContent = createElement(\"div\", [\"section-content\"]);\n        sectionContent.html(createUsePrevQuestSectionContent(data));\n        var sectionFooter = createElement(\"div\", [\"section-footer\"]);\n        var addButton = createElement(\"button\", [\"button\"], \"usePrevButtonModal\").text(\"Add selected questions\");\n        var cancelButton = createElement(\"button\", [\"button\", \"borderLess-button\",, \"cancel-container-button\"]).text(\"Cancel\");\n        var totalQuestionsAdded = createElement(\"div\", [\"quest-added-text\", \"totalQuestAdded\"]).text(\"Questions added: 0/10\");\n        sectionFooter.html(addButton[0].outerHTML + cancelButton[0].outerHTML + totalQuestionsAdded[0].outerHTML);\n\n        return sectionHeading[0].outerHTML + sectionContent[0].outerHTML + sectionFooter[0].outerHTML;\n    }\n\n    function createUsePrevQuestSectionContent(data) {\n        var sectionRowStr = '';\n        data.forEach(function (aQuestion) {\n            var sectionRow = createElement(\"div\", [\"section-row\"]);\n            var checkbox = createCheckbox(\"addQuestSectionRow\" + aQuestion[\"id\"], null, aQuestion[\"id\"], null, aQuestion[\"question\"]);\n            if (aQuestion[\"answerOptions\"].length) {\n                var slideDropdown = createSlideDropDown(aQuestion[\"answerOptions\"]);\n            }\n\n            sectionRow.html(checkbox + slideDropdown);\n            sectionRowStr += sectionRow[0].outerHTML;\n        });\n\n        return sectionRowStr;\n    }\n\n    function createAddQuestSectionContent(questionType) {\n        var questionText = createElement(\"div\", [\"text\"]).text(\"Question Text\");\n        var questionTextarea = createElement(\"textarea\", [\"textarea\"], \"questionTextarea\").attr({ \"placeholder\": \"What would you like to ask?\" });\n\n        if ([\"multi\", \"single\"].indexOf(questionType) != -1) {\n            var optionsWrapper = createElement(\"div\", [\"options-wrapper\"]);\n            var optionTextArea = createTextarea(2, 0);\n            var addOptionButton = createElement(\"button\", [\"button\", \"borderLess-button\", \"add-quest-option\"], \"addQuestOptionButton\").text(\"Add\");\n            optionsWrapper.html(optionTextArea);\n            return questionText[0].outerHTML + questionTextarea[0].outerHTML + optionsWrapper[0].outerHTML + addOptionButton[0].outerHTML;\n        }\n\n        return questionText[0].outerHTML + questionTextarea[0].outerHTML;\n    }\n\n    function onClickPrevQuestCheckboxModal() {\n        settings.usePrevQuestContainer.on('click', '.' + transformClass([\"checkbox-input\"]), function (event) {\n            event.stopPropagation();\n            if ($(this).is(\":checked\")) {\n                settings.totalQuestAddedCount += 1;\n                updateTotalQuestionsAddedText();\n                if (settings.totalQuestAddedCount == 10) {\n                    settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"])).attr(\"disabled\", true);\n                    settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"]) + ':checked').attr(\"disabled\", false);\n                }\n                // var el = settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"]) + ':checked')\n                // console.log(el)\n            } else {\n                settings.totalQuestAddedCount -= 1;\n                updateTotalQuestionsAddedText();\n                settings.usePrevQuestContainer.find('.' + transformClass([\"checkbox-input\"])).attr(\"disabled\", false);\n            }\n        });\n        settings.usePrevQuestContainer.on('click', '.' + transformClass([\"checkbox-label\"]), function (event) {\n            event.stopPropagation();\n        });\n    }\n\n    function updateTotalQuestionsAddedText() {\n        settings.totalQuestAdded.text(\"Questions added: \" + settings.totalQuestAddedCount + \"/10\");\n    }\n\n    // export function populatePreviousUsedQuestions(data) {\n    //     settings.usePrevQuestContainer.find(\".\" + transformClass([\"section-content\"])).html(createUsePrevQuestSectionContent(data))\n    // }\n\n    function associateQuestionWithQuestionaire(questionaireId, sectionId, data, extraParameters) {\n    \treturn postRequest(baseUrl + \"/v1/questionaire/\" + questionaireId + \"/section/\" + sectionId + \"/question\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\t// res.extraParameters = {}\n    \t\t\t// res.extraParameters[\"questionaireId\"] = extraParameters.questionaireId\n    \t\t\treturn pubsub.publish(\"associatedQuestionWithQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToAssociateQuestionWithQuestionaire\", res);\n    \t});\n    }\n\n    function createQuestion(data, extraParameters) {\n    \treturn postRequest(baseUrl + \"/v1/question\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\tres.extraParameters = {};\n    \t\t\tres.extraParameters[\"questionaireId\"] = extraParameters.questionaireId;\n    \t\t\tres.extraParameters[\"questionData\"] = extraParameters.questionData;\n    \t\t\treturn pubsub.publish(\"createdQuestion\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToCreateQuestion\", res);\n    \t});\n    }\n\n    function fetchQuestions(parameters) {\n    \treturn getRequest(baseUrl + \"/v1/question\", parameters, function (res) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\treturn pubsub.publish(\"fetchedQuestions\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToFetchQuestions\", res);\n    \t});\n    }\n\n    function createQuestionaire(data, extraParameters) {\n    \treturn postRequest(baseUrl + \"/v1/questionaire\", { \"content-type\": \"application/json\" }, JSON.stringify(data), function (res, status, xhr) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\tres.extraParameters = {};\n    \t\t\tres.extraParameters[\"questionData\"] = extraParameters.questionData;\n    \t\t\treturn pubsub.publish(\"createdQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToCreateQuestionaire\", res);\n    \t});\n    }\n\n    function fetchQuestionaire(parameters) {\n    \treturn getRequest(baseUrl + \"/v1/questionaire\", parameters, function (res) {\n    \t\tif (res.status && res.status == 'success') {\n    \t\t\treturn pubsub.publish(\"fetchedQuestionaire\", res);\n    \t\t}\n    \t}, function (res, status, error) {\n    \t\treturn pubsub.publish(\"failedToFetchQuestionaire\", res);\n    \t});\n    }\n\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n    var globalParameters = {\n        questionaireId: null,\n        questions: {}\n    };\n\n    function Assessment(config) {\n        var options = {};\n        // Define option defaults\n        var defaults = {\n            title: 'Screening Questions',\n            subTitle: 'You can ask some questions before the candidates apply to your job!'\n\n            // Create options by extending defaults with the passed in arugments\n        };if (config && (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === \"object\") {\n            options = extendDefaults(defaults, config);\n        }\n\n        var questionaireParameters = {\n            \"association\": options.association,\n            \"invocation\": questionaireInvocation[\"screening\"]\n        };\n\n        var questionsParameters = {\n            \"author\": options.author\n        };\n\n        $.when(fetchQuestionaire(questionaireParameters), fetchQuestions(questionsParameters)).then(function (a, b) {\n            if (a[0] && b[0] && a[0][\"status\"] == \"success\" && b[0][\"status\"] == \"success\") {\n\n                var questionaireRows = a[0]['data'];\n                var questionRows = b[0]['data'];\n\n                var data = {\n                    \"questionaire\": questionaireRows,\n                    \"prevQuestions\": questionRows,\n                    \"options\": options\n                };\n                return pubsub.publish(\"fetchedQuestionaireDetails\", data);\n            }\n        }, function (res, status, error) {\n            return pubsub.publish(\"failedToFetchQuestionaireDetails\", res);\n        });\n    }\n\n    function onSuccessfullFetchedQuestionaireDetails(topic, data) {\n        if (data.questionaire.length) {\n            globalParameters.questionaireId = data.questionaire[0][\"id\"];\n            data.questionaire[0][\"sections\"][0][\"questions\"].forEach(function (aQuestion) {\n                globalParameters.questions[aQuestion[\"id\"]] = aQuestion;\n            });\n        }\n\n        initialize(data);\n\n        // model.onClick\n\n        onClickUsePrevButtonModal(function () {\n            console.log(\"hi\");\n        });\n\n        onClickAddQuestion(function (questionData) {\n            if (!globalParameters.questionaireId) {\n                var questionaireData = {\n                    \"author\": data.options.author,\n                    \"tags\": data.options.tags,\n                    \"authorType\": data.options.authorType,\n                    \"invocation\": questionaireInvocation[\"screening\"],\n                    \"association\": data.options.association,\n                    \"sections\": [{\n                        \"type\": \"static\",\n                        \"questionIds\": []\n                    }]\n                };\n                var extraParameters = {};\n                extraParameters.questionData = questionData;\n                return createQuestionaire(questionaireData, extraParameters);\n            }\n\n            var extraParameters = {};\n            extraParameters.questionaireId = globalParameters.questionaireId;\n            extraParameters.questionData = questionData;\n            createQuestion(questionData, extraParameters);\n        });\n    }\n\n    function onFailFetchedQuestionaireDetails(topic, data) {}\n\n    var fetchedQuestionaireDetailsSuccessSubscription = pubsub.subscribe(\"fetchedQuestionaireDetails\", onSuccessfullFetchedQuestionaireDetails);\n    var fetchedQuestionaireDetailsFailSubscription = pubsub.subscribe(\"failedToFetchQuestionaireDetails\", onFailFetchedQuestionaireDetails);\n\n    function onSuccessfullCreateQuestionaire(topic, res) {\n        var extraParameters = {};\n        extraParameters.questionaireId = res.data;\n        extraParameters.questionData = res.extraParameters.questionData;\n        createQuestion(res.extraParameters.questionData, extraParameters);\n    }\n\n    function onFailCreateQuestionaire(topic, data) {}\n\n    var createdQuestionaireSuccessSubscription = pubsub.subscribe(\"createdQuestionaire\", onSuccessfullCreateQuestionaire);\n    var createdQuestionaireFailSubscription = pubsub.subscribe(\"failedToCreateQuestionaire\", onFailCreateQuestionaire);\n\n    function onSuccessfullCreateQuestion(topic, res) {\n        globalParameters.questions[res.data] = res.extraParameters.questionData;\n        var data = {};\n        data[\"questionIds\"] = Object.keys(globalParameters.questions);\n        associateQuestionWithQuestionaire(res.extraParameters.questionaireId, 0, data, {});\n    }\n\n    function onFailCreateQuestion(topic, data) {}\n\n    var createdQuestionSuccessSubscription = pubsub.subscribe(\"createdQuestion\", onSuccessfullCreateQuestion);\n    var createdQuestionFailSubscription = pubsub.subscribe(\"failedToCreateQuestion\", onFailCreateQuestion);\n\n    function onSuccessfullAssociateQuestionWithQuestionaire(topic, res) {\n        closeContainer();\n        alert(res.message);\n    }\n\n    function onFailAssociateQuestionWithQuestionaire(topic, data) {}\n\n    var associatedQuestionWithQuestionaireSuccessSubscription = pubsub.subscribe(\"associatedQuestionWithQuestionaire\", onSuccessfullAssociateQuestionWithQuestionaire);\n    var associatedQuestionWithQuestionaireFailSubscription = pubsub.subscribe(\"failedToAssociateQuestionWithQuestionaire\", onFailAssociateQuestionWithQuestionaire);\n\n    return Assessment;\n\n}());\n"],"file":"../bundle.js"}